var Web3 = require('web3');
//local ganache blockchain

//importing the contracts artifacts generated by truffle. This also holds the abi
const MyContract = require('../build/contracts/Game.json')
const privateKey = require('../.secret')
address = '0xeF32539D384b24f940705495bb45Bb15d917dF07'
contract_address = '0x3dfb15ac427Ded9D158e8FA005c2A515e0269FEB'




 const init = async () => {
    const web3 = new Web3("http://localhost:8545")
    web3.eth.transactionConfirmationBlocks = 2;

    //initializing contract
    const contract = new web3.eth.Contract(
        MyContract.abi,
        contract_address
    );

    state = await contract.methods.peakState().call()
    console.log('state is:', state)


    /* //Need to sign tx before - as the address is not unlocked (compared to typical frontends)
    contract.methods.playMove(1).send({
        from: appAccount,
    })
      .on('receipt', receipt => console.log(receipt))
      .on('confirmation', (confirmationNumber, receipt) => {
          contract.methods.getData().call()
          .then(data => console.log(data))
      })
      .on('error', (error, receipt) => console.log(error, receipt))
 }; */

    const tx = contract.methods.playMove(1);
    //const gas = await tx.estimateGas({from: address});
    const gasPrice = await web3.eth.getGasPrice();
    const data = tx.encodeABI();
    const nonce = await web3.eth.getTransactionCount(address) //todo
    console.log('nonce is', nonce)

    const signedTx = await web3.eth.accounts.signTransaction(
        {
            to: contract_address,
            data,
            gas: 5500000,
            gasPrice,
            nonce,
            chainID: 1337
        },
        privateKey
    );
    console.log(`Ã’ld data value: ${await contract.methods.peakState().call()}`);
    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
    console.log(receipt);
    console.log(`new data value: ${await contract.methods.peakState().call()}`);

 }

init();

//promise api - not a big fan yet
//contract.methods.dueDate().call()
//    .then(result => console.log(result))